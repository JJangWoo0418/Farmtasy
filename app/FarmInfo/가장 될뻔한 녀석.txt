// app/Components/Css/FarmInfo/WeatherAPI.js
import axios from 'axios';
import { WEATHER_API_KEY_PORTAL, WEATHER_API_KEY_KMA } from '../../API/apikey';
import { XMLParser } from 'fast-xml-parser';

// XML 파서 설정
const parser = new XMLParser();

// 공통 API 요청 함수
const fetchAPI = async (url, params, useKmaKey = false) => {
  try {
    const finalParams = {
      ...params,
      ...(url.includes('data.go.kr')
        ? { serviceKey: WEATHER_API_KEY_PORTAL }
        : { authKey: WEATHER_API_KEY_KMA }),
    };

    const response = await axios.get(url, { params: finalParams });
    const xml = response.data;
    console.log('[LOG] 날씨 API 원 응답:', xml);
    const json = parser.parse(xml);
    return json;
  } catch (error) {
    console.error('[ERROR] 기상청 API 요청 오류:', error);
    return null;
  }
};

// 통합 호출 함수
export const fetchWeather = async (type, params) => {
  switch (type) {
    case 'ultraNcst':
      return await fetchUltraSrtNcst(params);
    case 'ultraFcst':
      return await fetchUltraSrtFcst(params);
    case 'vilageFcst':
      return await fetchVilageFcst(params);
    case 'midLandFcst':
      return await fetchMidLandFcst(params);
    case 'midTa':
      return await fetchMidTa(params);
    case 'warning':
      return await fetchWarningNow();
    case 'typhoon':
      return await fetchTyphoon(params);
    case 'latlon': {
      const { lat, lon } = params || {};
      if (lat === undefined || lon === undefined) {
        console.error('[ERROR] 격자 변환 파라미터 누락');
        return null;
      }
      return await convertLatLonToGrid({ lat, lon });
    }
    default:
      console.error('[ERROR] 알 수 없는 요청 유형:', type);
      return null;
  }
};

// 초단기실황조회
export const fetchUltraSrtNcst = async ({ nx, ny, base_date, base_time }) => {
  return await fetchAPI('https://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getUltraSrtNcst', {
    pageNo: 1,
    numOfRows: 1000,
    dataType: 'XML',
    base_date,
    base_time,
    nx,
    ny,
  });
};

// 초단기예보조회
export const fetchUltraSrtFcst = async ({ nx, ny, base_date, base_time }) => {
  return await fetchAPI('https://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getUltraSrtFcst', {
    pageNo: 1,
    numOfRows: 1000,
    dataType: 'XML',
    base_date,
    base_time,
    nx,
    ny,
  });
};

// 단기예보조회
export const fetchVilageFcst = async ({ nx, ny, base_date, base_time }) => {
  return await fetchAPI('https://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getVilageFcst', {
    pageNo: 1,
    numOfRows: 1000,
    dataType: 'XML',
    base_date,
    base_time,
    nx,
    ny,
  });
};

// 중기육상예보
export const fetchMidLandFcst = async ({ regId, tmFc }) => {
  return await fetchAPI('https://apis.data.go.kr/1360000/MidFcstInfoService/getMidLandFcst', {
    dataType: 'XML',
    regId,
    tmFc,
  });
};

// 중기기온예보
export const fetchMidTa = async ({ regId, tmFc }) => {
  return await fetchAPI('https://apis.data.go.kr/1360000/MidFcstInfoService/getMidTa', {
    dataType: 'XML',
    regId,
    tmFc,
  });
};

// 기상특보
export const fetchWarningNow = async () => {
  return await fetchAPI('https://apihub.kma.go.kr/api/typ01/url/wrn_now_data.php', {
    fe: 'f',
  }, true);
};

// 태풍정보
export const fetchTyphoon = async ({ YY, typ, seq, mode }) => {
  return await fetchAPI('https://apihub.kma.go.kr/api/typ01/url/typ_data.php', {
    YY,
    typ,
    seq,
    mode,
  }, true);
};

// 위경도 → 격자변환
export const convertLatLonToGrid = async ({ lat, lon }) => {
  try {
    console.log('[LOG] 모드: latlon');
    console.log('[LOG] 격자 변환 요청 좌표:', { lat, lon });

    const response = await axios.get('https://apihub.kma.go.kr/api/typ01/cgi-bin/url/nph-dfs_xy_lonlat', {
      params: {
        lat,
        lon,
        authKey: WEATHER_API_KEY_KMA,
      },
    });

    const text = response.data;
    const match = text.match(/\s+(\d+\.\d+),\s+(\d+\.\d+),\s+(\d+),\s+(\d+)/);

    if (match) {
      const result = {
        lon: parseFloat(match[1]),
        lat: parseFloat(match[2]),
        x: parseInt(match[3]),
        y: parseInt(match[4]),
      };
      console.log('[LOG] 격자 정보:', result);
      return result;
    } else {
      console.error('[ERROR] 격자 정보 없음.');
      return null;
    }
  } catch (error) {
    console.error('[ERROR] 격자 변환 요청 오류:', error);
    return null;
  }
};

가장 될뻔한 코드 Weather.js

// app/FarmInfo/index.js
import React, { useEffect, useState } from 'react';
import { View, Text, Button, ScrollView } from 'react-native';
import styles from '../Components/Css/FarmInfo/index.js';
import { fetchWeather } from '../Components/Css/FarmInfo/WeatherAPI';
import { getBaseDateTime } from '../Components/Utils/timeUtils';
import * as Location from 'expo-location'; // Expo Location API 사용

const FARM_COORDS = {
  latitude: 36.953862288,
  longitude: 127.681782599,
  //우리집 음성
};

export default function FarmInfo() {
  const [mode, setMode] = useState('farm');
  const [weatherData, setWeatherData] = useState(null);
  const [weeklyData, setWeeklyData] = useState(null);
  const [warningData, setWarningData] = useState('');
  const [loading, setLoading] = useState(false);

  const loadWeather = async () => {
    setLoading(true);
    let coords = FARM_COORDS;
    console.log('[공통] 현재 설정된 농장 좌표:', coords);

    if (mode === 'current') {
      try {
        const { status } = await Location.requestForegroundPermissionsAsync();
        if (status !== 'granted') {
          console.error('[공통] 위치 권한 거부됨');
          setLoading(false);
          return;
        }

        const position = await Location.getCurrentPositionAsync({});
        coords = {
          latitude: position.coords.latitude,
          longitude: position.coords.longitude,
        };
        console.log('[공통] 현재 위치 좌표:', coords);
      } catch (error) {
        console.error('[공통] 현재 위치 가져오기 실패:', error);
        setLoading(false);
        return;
      }
    }

    const { base_date, base_time } = getBaseDateTime();
    console.log('[공통] 기준 날짜 및 시간:', base_date, base_time);

    const grid = await fetchWeather('latlon', {
      lat: coords.latitude,
      lon: coords.longitude,
    });
    console.log('[격자변환] 결과:', grid);
    if (!grid || !grid.x || !grid.y) {
      setLoading(false);
      return;
    }

    console.log('[시간대별 날씨] 요청 좌표:', grid.x, grid.y);
    const forecast = await fetchWeather('ultraFcst', {
      nx: grid.x,
      ny: grid.y,
      base_date,
      base_time,
    });
    console.log('[시간대별 날씨] 응답:', forecast);

    const midForecast = grid.midLandId && grid.tmFc ? await fetchWeather('midLandFcst', {
      regId: grid.midLandId,
      tmFc: grid.tmFc,
    }) : null;
    console.log('[주간 날씨] 응답:', midForecast);

    const warning = await fetchWeather('warning');
    console.log('[기상 특보] 응답:', warning);

    if (forecast) setWeatherData(forecast);
    if (midForecast) setWeeklyData(midForecast);
    if (typeof warning === 'string') setWarningData(warning);

    setLoading(false);
  };

  useEffect(() => {
    loadWeather();
  }, [mode]);

  const getEmojiForPty = (value) => {
    switch (value) {
      case '0': return '☀ ';
      case '1': return '🌧 ';
      case '2': return '🌦 ';
      case '3': return '❄ ';
      case '4': return '🌨 ';
      default: return '☁ ';
    }
  };

  const getEmojiForSky = (value) => {
    switch (value) {
      case '1': return '☀ ';
      case '3': return '⛅ ';
      case '4': return '☁ ';
      default: return '☁ ';
    }
  };

  const renderForecast = () => {
    const msg = weatherData?.response?.header?.resultMsg;
    const code = weatherData?.response?.header?.resultCode;
    if (msg !== 'NORMAL_SERVICE') return <Text style={styles.errorText}>에러: {msg} (코드 {code})</Text>;

    const items = weatherData?.response?.body?.items?.item || [];
    const categories = ['PTY', 'RN1', 'SKY', 'T1H', 'REH'];
    const grouped = {};

    for (const item of items) {
      if (!categories.includes(item.category)) continue;
      if (!grouped[item.fcstTime]) grouped[item.fcstTime] = {};
      grouped[item.fcstTime][item.category] = item.fcstValue;
    }

    console.log('[시간대별 날씨] 그룹화된 데이터:', grouped);

    return Object.entries(grouped).map(([time, data], idx) => {
      const pty = data['PTY'];
      const rn1 = data['RN1'];
      const sky = data['SKY'];
      const t1h = data['T1H'];
      const reh = data['REH'];
      const emoji = pty !== '0' ? getEmojiForPty(pty) : getEmojiForSky(sky);
      const rainInfo = (pty !== '0' && rn1 !== '강수없음') ? `${rn1} ` : '';
      const temp = t1h ? `${t1h} ℃ ` : '';
      const humidity = reh ? `${reh}%` : '';
      const hour = `${String(time).padStart(4, '0').slice(0, 2)}시`;

      return (
        <View key={idx} style={styles.row}>
          <Text style={styles.time}>{hour}</Text>
          <Text style={styles.value}>{emoji}</Text>
          <Text style={styles.value}>{rainInfo}</Text>
          <Text style={styles.value}>{temp}</Text>
          <Text style={styles.value}>{humidity}</Text>
        </View>
      );
    });
  };

  const renderWeekly = () => {
    const items = weeklyData?.response?.body?.items?.item || [];
    const filtered = items.filter(item => item.wfAm && item.wfPm);
    console.log('[주간 날씨] 필터링된 데이터:', filtered);
    if (filtered.length === 0) return <Text style={styles.noWarning}>주간 예보 데이터 없음</Text>;

    const getEmoji = (text) => {
      if (text.includes('맑')) return '☀';
      if (text.includes('구름많')) return '⛅';
      if (text.includes('흐림')) return '☁';
      if (text.includes('비')) return '🌧';
      if (text.includes('눈')) return '❄';
      return '❓';
    };

    return filtered.map((item, idx) => (
      <View key={idx} style={styles.row}>
        <Text style={styles.time}>{item.fcstDate}</Text>
        <Text style={styles.value}>{getEmoji(item.wfAm)} / {getEmoji(item.wfPm)}</Text>
        <Text style={styles.value}>{item.wfAm} / {item.wfPm}</Text>
      </View>
    ));
  };

  const renderWarning = () => {
    const lines = typeof warningData === 'string'
      ? warningData.split('\n').filter(line => line.startsWith('L'))
      : [];
    console.log('[기상 특보] 파싱된 특보 라인:', lines);
    if (lines.length === 0) return <Text style={styles.noWarning}>현재 발효 중인 특보가 없습니다.</Text>;
    return lines.map((line, idx) => <Text key={idx} style={styles.warningLine}>{line}</Text>);
  };

  return (
    <ScrollView style={styles.container}>
      <View style={styles.tabContainer}>
        <Button title="내 농장 날씨" onPress={() => setMode('farm')} />
        <Button title="현 위치 날씨" onPress={() => setMode('current')} />
      </View>

      <View style={styles.weatherBox}>
        <Text style={styles.sectionTitle}>[시간대별 날씨]</Text>
        {loading ? (
          <Text style={styles.loading}>로딩중...</Text>
        ) : (
          renderForecast()
        )}
      </View>

      <View style={styles.weatherBox}>
        <Text style={styles.sectionTitle}>[주간 날씨]</Text>
        {loading ? (
          <Text style={styles.loading}>로딩중...</Text>
        ) : (
          renderWeekly()
        )}
      </View>

      <View style={styles.weatherBox}>
        <Text style={styles.sectionTitle}>[기상 특보]</Text>
        {loading ? (
          <Text style={styles.loading}>로딩중...</Text>
        ) : (
          renderWarning()
        )}
      </View>
    </ScrollView>
  );
}
